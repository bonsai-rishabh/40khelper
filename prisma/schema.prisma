generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model abilities {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  description    String?
  unit_abilities unit_abilities[]
}

model auras {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  description String?
  unit_auras  unit_auras[]
}

model melee_weapons {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  range              Int?
  type               String?              @db.VarChar(255)
  strength           Int?
  ap                 Int?
  damage             Int?
  attacks            Int?
  ability            String?
  unit_melee_weapons unit_melee_weapons[]
}

model ranged_weapons {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  range               Int?
  type                String?               @db.VarChar(255)
  strength            Int?
  ap                  Int?
  damage              Int?
  ability             String?
  unit_ranged_weapons unit_ranged_weapons[]
}

model relics {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  description String?
  unit_relics unit_relics[]
}

model stratagems {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  description     String?
  unit_stratagems unit_stratagems[]
}

model unit_abilities {
  id              Int              @id @default(autoincrement())
  unit_id         Int?
  ability_id      Int?
  abilities       abilities?       @relation(fields: [ability_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  warhammer_units warhammer_units? @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model unit_auras {
  id              Int              @id @default(autoincrement())
  unit_id         Int?
  aura_id         Int?
  auras           auras?           @relation(fields: [aura_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  warhammer_units warhammer_units? @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model unit_keywords {
  id              Int              @id @default(autoincrement())
  unit_id         Int?
  keyword         String           @db.VarChar(255)
  warhammer_units warhammer_units? @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model unit_melee_weapons {
  id              Int              @id @default(autoincrement())
  unit_id         Int?
  melee_weapon_id Int?
  melee_weapons   melee_weapons?   @relation(fields: [melee_weapon_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  warhammer_units warhammer_units? @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model unit_ranged_weapons {
  id               Int              @id @default(autoincrement())
  unit_id          Int?
  ranged_weapon_id Int?
  ranged_weapons   ranged_weapons?  @relation(fields: [ranged_weapon_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  warhammer_units  warhammer_units? @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model unit_relics {
  id              Int              @id @default(autoincrement())
  unit_id         Int?
  relic_id        Int?
  relics          relics?          @relation(fields: [relic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  warhammer_units warhammer_units? @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model unit_stratagems {
  id              Int              @id @default(autoincrement())
  unit_id         Int?
  stratagem_id    Int?
  stratagems      stratagems?      @relation(fields: [stratagem_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  warhammer_units warhammer_units? @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model warhammer_units {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  movement            Int?
  ws                  Int?
  ws_plus             Boolean?
  bs                  Int?
  bs_plus             Boolean?
  strength            Int?
  toughness           Int?
  wounds              Int?
  attacks             Int?
  leadership          Int?
  save                Int?
  unit_abilities      unit_abilities[]
  unit_auras          unit_auras[]
  unit_keywords       unit_keywords[]
  unit_melee_weapons  unit_melee_weapons[]
  unit_ranged_weapons unit_ranged_weapons[]
  unit_relics         unit_relics[]
  unit_stratagems     unit_stratagems[]
}
